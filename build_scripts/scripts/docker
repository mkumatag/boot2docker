#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
# docker daemon start script
[ $(id -u) = 0 ] || { echo 'must be root' ; exit 1; }

#import settings from profile (e.g. HTTP_PROXY, HTTPS_PROXY)
test -f '/var/lib/boot2docker/profile' && . '/var/lib/boot2docker/profile'

: ${DOCKER_HOST:='-H tcp://0.0.0.0:2376'}
: ${DOCKER_TLS:=auto}
: ${DOCKER_STORAGE:=auto}
: ${DOCKER_DIR:=/var/lib/docker}
: ${DOCKER_ULIMITS:=1048576}
: ${DOCKER_LOGFILE:=/var/lib/boot2docker/docker.log}

: ${CERTDIR:=/var/lib/boot2docker/}
: ${CERT_INTERFACES:='eth0'}
: ${CACERT:="${CERTDIR}ca.pem"}
: ${CAKEY:="${CERTDIR}cakey.pem"}
: ${SERVERCERT:="${CERTDIR}server.pem"}
: ${SERVERKEY:="${CERTDIR}serverkey.pem"}
: ${CERT:="${CERTDIR}cert.pem"}
: ${KEY:="${CERTDIR}key.pem"}
: ${ORG:=Boot2Docker}
: ${SERVERORG:="${ORG}"}
: ${CAORG:="${ORG}CA"} # Append 'CA'; see <http://rt.openssl.org/Ticket/History.html?use r=guest&pass=guest&id=3979>

# Add /usr/local/sbin to the path.
#export PATH=${PATH}:/usr/local/sbin


cgroupfs_mount() {
        # see also https://github.com/tianon/cgroupfs-mount/blob/master/cgroupfs-mount
        if grep -v '^#' /etc/fstab | grep -q cgroup \
                || [ ! -e /proc/cgroups ] \
                || [ ! -d /sys/fs/cgroup ]; then
                return
        fi
        if ! mountpoint -q /sys/fs/cgroup; then
                mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup
        fi
        (
                cd /sys/fs/cgroup
                for sys in $(awk '!/^#/ { if ($4 == 1) print $1 }' /proc/cgroups); do
                        mkdir -p $sys
                        if ! mountpoint -q $sys; then
                                if ! mount -n -t cgroup -o $sys cgroup $sys; then
                                        rmdir $sys || true
                                fi
                        fi
                done
        )
}




start() {
    if [ ! -e "/etc/docker" ]; then
        echo "Linking /etc/docker to /var/lib/boot2docker for persistence"
        mkdir -p "/var/lib/boot2docker/etc/docker"
        ln -sf "/var/lib/boot2docker/etc/docker" "/etc/docker"
    fi
	#load aufs kernel module
	cgroupfs_mount
	modprobe aufs
	ifup lo
	#check if ca certifcate is available
	if [ -e "$CACERT" ]; then
	
    		# Not enabling Docker daemon TLS by default.
    		if [ "$DOCKER_TLS" != "no" ]; then
       	 		if [ "$DOCKER_TLS" == "auto" ]; then
            			DOCKER_HOST='-H tcp://0.0.0.0:2376'
            			EXTRA_ARGS="$EXTRA_ARGS --tlsverify --tlscacert=$CACERT --tlscert=$SERVERCERT --tlskey=$SERVERKEY"
        		elif [ "$DOCKER_TLS" != "no" ]; then
            			EXTRA_ARGS="$EXTRA_ARGS $DOCKER_TLS --tlscacert=$CACERT --tlscert=$SERVERCERT --tlskey=$SERVERKEY"
        	fi

    	fi
     fi
    mkdir -p "$DOCKER_DIR"

    if [ "$DOCKER_STORAGE" = 'auto' ]; then
        #currently added support for aufs only,
	# if /var/lib/docker is on BTRFS, let's use the native btrfs driver
        # (AUFS on top of BTRFS does very bad things)
        DOCKER_DEVICE="$(df -P "$DOCKER_DIR" | awk 'END { print $1 }')"
        DOCKER_FSTYPE="aufs"
        if [ "$DOCKER_FSTYPE" = 'aufs' ]; then
            DOCKER_STORAGE="$DOCKER_FSTYPE"
        fi
    fi
    if [ "$DOCKER_STORAGE" != 'auto' ]; then
        # in the general case, let's trust Docker to "do the right thing"
        EXTRA_ARGS="$EXTRA_ARGS -s $DOCKER_STORAGE"
    fi

    # Increasing the number of open files and processes by docker
    ulimit -n $DOCKER_ULIMITS
    ulimit -p $DOCKER_ULIMITS

    echo "------------------------" >> "$DOCKER_LOGFILE"
    echo "dockerd -D -g \"$DOCKER_DIR\" -H unix:// $DOCKER_HOST $EXTRA_ARGS >> \"$DOCKER_LOGFILE\"" >> "$DOCKER_LOGFILE"
    dockerd -D -g "$DOCKER_DIR" -H unix:// $DOCKER_HOST $EXTRA_ARGS >> "$DOCKER_LOGFILE" 2>&1 &
    iptables -F
}

stop() {
    PID=$(cat /var/run/docker.pid)
    kill $PID
    while kill -0 $PID &>/dev/null; do
        sleep 0.1
    done
}

restart() {
    if check; then
        stop
        i=30
        while check ; do
            sleep 1
            i=$(expr $i - 1)
            [ "$i" -gt 0 ] || { echo "Failed to stop Docker dameon" ; exit 1 ; }
        done
    fi
    start
}

check() {
    [ -f /var/run/docker.pid ] && ps -A -o pid | grep "^\s*$(cat /var/run/docker.pid)$" > /dev/null 2>&1
}

status() {
    if check; then
        echo 'Docker daemon is running'
        exit 0
    else
        echo 'Docker daemon is not running'
        exit 1
    fi
}

case $1 in
    start) start;;
    stop) stop;;
    restart) restart;;
    status) status;;
    *) echo "Usage $0 {start|stop|restart|status}"; exit 1
esac
